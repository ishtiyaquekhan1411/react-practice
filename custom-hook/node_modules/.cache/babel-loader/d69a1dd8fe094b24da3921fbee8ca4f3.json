{"ast":null,"code":"var _jsxFileName = \"/home/deq/react-training/udemy/custom-hook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n  const {\n    isLoading,\n    error,\n    sendRequest\n  } = useHttp();\n\n  const transformedTask = taskData => {\n    const loadedTasks = [];\n\n    for (const taskKey in taskData) {\n      loadedTasks.push({\n        id: taskKey,\n        text: taskData[taskKey].text\n      });\n    }\n\n    setTasks(loadedTasks);\n  };\n\n  useEffect(() => {\n    sendRequest({\n      url: 'https://react-http-6b4a6.firebaseio.com/tasks.json'\n    }, transformedTask);\n  }, []);\n\n  const taskAddHandler = task => {\n    setTasks(prevTasks => prevTasks.concat(task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewTask, {\n      onAddTask: taskAddHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tasks, {\n      items: tasks,\n      loading: isLoading,\n      error: error,\n      onFetch: sendRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nGf7ihP8IrradI09ChVjVSTa2Ag=\", false, function () {\n  return [useHttp];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/deq/react-training/udemy/custom-hook/src/App.js"],"names":["React","useEffect","useState","Tasks","NewTask","useHttp","App","tasks","setTasks","isLoading","error","sendRequest","transformedTask","taskData","loadedTasks","taskKey","push","id","text","url","taskAddHandler","task","prevTasks","concat"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,OAAP,MAAoB,6BAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEO,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAAoCN,OAAO,EAAjD;;AAEA,QAAMO,eAAe,GAAIC,QAAD,IAAc;AACpC,UAAMC,WAAW,GAAG,EAApB;;AAEA,SAAK,MAAMC,OAAX,IAAsBF,QAAtB,EAAgC;AAC9BC,MAAAA,WAAW,CAACE,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,OAAN;AAAeG,QAAAA,IAAI,EAAEL,QAAQ,CAACE,OAAD,CAAR,CAAkBG;AAAvC,OAAjB;AACD;;AACDV,IAAAA,QAAQ,CAACM,WAAD,CAAR;AACD,GAPD;;AASAb,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,WAAW,CAAC;AAACQ,MAAAA,GAAG,EAAE;AAAN,KAAD,EAA8DP,eAA9D,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMQ,cAAc,GAAIC,IAAD,IAAU;AAC/Bb,IAAAA,QAAQ,CAAEc,SAAD,IAAeA,SAAS,CAACC,MAAV,CAAiBF,IAAjB,CAAhB,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AACE,MAAA,KAAK,EAAEb,KADT;AAEE,MAAA,OAAO,EAAEE,SAFX;AAGE,MAAA,KAAK,EAAEC,KAHT;AAIE,MAAA,OAAO,EAAEC;AAJX;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAhCQL,G;UAEmCD,O;;;KAFnCC,G;AAkCT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport Tasks from './components/Tasks/Tasks';\nimport NewTask from './components/NewTask/NewTask';\nimport useHttp from './components/hooks/use-http';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const { isLoading, error, sendRequest } = useHttp();\n\n  const transformedTask = (taskData) => {\n    const loadedTasks = [];\n\n    for (const taskKey in taskData) {\n      loadedTasks.push({ id: taskKey, text: taskData[taskKey].text });\n    }\n    setTasks(loadedTasks);\n  }\n\n  useEffect(() => {\n    sendRequest({url: 'https://react-http-6b4a6.firebaseio.com/tasks.json'}, transformedTask)\n  }, []);\n\n  const taskAddHandler = (task) => {\n    setTasks((prevTasks) => prevTasks.concat(task));\n  };\n\n  return (\n    <React.Fragment>\n      <NewTask onAddTask={taskAddHandler} />\n      <Tasks\n        items={tasks}\n        loading={isLoading}\n        error={error}\n        onFetch={sendRequest}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}