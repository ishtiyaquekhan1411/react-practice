{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method || 'GET',\n        body: requestConfig.body || null,\n        headers: requestConfig.headers || {}\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["/home/deq/react-training/udemy/custom-hook/src/components/hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","response","fetch","url","method","body","headers","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,OAAON,aAAP,EAAsBC,SAAtB,KAAoC;AACtDE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAC1BR,aAAa,CAACS,GADY,EAE1B;AACEC,QAAAA,MAAM,EAAEV,aAAa,CAACU,MAAd,IAAwB,KADlC;AAEEC,QAAAA,IAAI,EAAEX,aAAa,CAACW,IAAd,IAAsB,IAF9B;AAGEC,QAAAA,OAAO,EAAEZ,aAAa,CAACY,OAAd,IAAyB;AAHpC,OAF0B,CAA5B;;AASA,UAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACAf,MAAAA,SAAS,CAACc,IAAD,CAAT;AACD,KAhBD,CAgBE,OAAOE,GAAP,EAAY;AACZZ,MAAAA,QAAQ,CAACY,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDf,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvBD;;AAyBA,SAAO;AAAED,IAAAA,SAAF;AAAaE,IAAAA,KAAb;AAAoBE,IAAAA;AAApB,GAAP;AACD,CA9BD;;GAAMP,O;;AAgCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url,\n        {\n          method: requestConfig.method || 'GET',\n          body: requestConfig.body || null,\n          headers: requestConfig.headers || {}\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n    setIsLoading(false);\n  };\n\n  return { isLoading, error, sendRequest };\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}